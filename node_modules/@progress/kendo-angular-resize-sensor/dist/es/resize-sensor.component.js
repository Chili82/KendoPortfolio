import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/operator/sampleTime';
/**
 * Emit up to 10 resize events per second by default.
 * Chosen as a compromise between responsiveness and performance.
 *
 * @hidden
 */
var DEFAULT_RATE_LIMIT = 10;
var computedProp = function (elem, prop) {
    return getComputedStyle(elem, null).getPropertyValue(prop);
};
/**
 * Resize Sensor Component
 *
 * Triggers a "resize" event whenever the parent DOM element size changes.
 */
export var ResizeSensorComponent = (function () {
    function ResizeSensorComponent(element) {
        this.element = element;
        /**
         * The maximum number of resize events to emit per second.
         *
         * Defaults to 10.
         */
        this.rateLimit = DEFAULT_RATE_LIMIT;
        /**
         * Fires when the parent DOM element has been resized.
         */
        this.resize = new EventEmitter();
        this.source = new Subject();
    }
    ResizeSensorComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (typeof document === 'undefined') {
            return;
        }
        var throttleTime = 1000 / (this.rateLimit || DEFAULT_RATE_LIMIT);
        this.subscription = this.source.asObservable()
            .sampleTime(throttleTime)
            .subscribe(function (config) {
            _this.resize.emit();
        });
        this.parentElement = this.element.nativeElement.parentElement;
        if (computedProp(this.parentElement, 'position') === 'static') {
            this.parentElement.style.position = 'relative';
        }
        this.reset();
    };
    ResizeSensorComponent.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    ResizeSensorComponent.prototype.scroll = function () {
        if (!this.parentElement) {
            return;
        }
        var cachedWidth = this.parentElement.offsetWidth;
        var cachedHeight = this.parentElement.offsetHeight;
        if (cachedWidth !== this.lastWidth || cachedHeight !== this.lastHeight) {
            this.lastWidth = cachedWidth;
            this.lastHeight = cachedHeight;
            this.source.next();
        }
        this.reset();
    };
    ResizeSensorComponent.prototype.reset = function () {
        var expandChild = this.expandChild.nativeElement;
        expandChild.style.width = 100000 + 'px';
        expandChild.style.height = 100000 + 'px';
        var expand = this.expand.nativeElement;
        expand.scrollLeft = 100000;
        expand.scrollTop = 100000;
        var shrink = this.shrink.nativeElement;
        shrink.scrollLeft = 100000;
        shrink.scrollTop = 100000;
    };
    ResizeSensorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'kendo-resize-sensor',
                    styles: ["\n    :host, .expand, .shrink {\n      position: absolute;\n      left: 0; top: 0; right: 0; bottom: 0;\n      z-index: -1;\n      overflow: hidden;\n      visibility: hidden;\n    }\n\n    .expand div, .shrink div {\n      position: absolute;\n      left: 0; top: 0;\n      transition: 0s;\n    }\n\n    .shrink div {\n      width: 200%;\n      height: 200%;\n    }\n    "],
                    template: "\n    <div #expand class=\"expand\" (scroll)=\"scroll()\">\n      <div #expandChild ></div>\n    </div>\n    <div #shrink class=\"shrink\" (scroll)=\"scroll()\">\n      <div></div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    ResizeSensorComponent.ctorParameters = [
        { type: ElementRef, },
    ];
    ResizeSensorComponent.propDecorators = {
        'rateLimit': [{ type: Input },],
        'resize': [{ type: Output },],
        'expand': [{ type: ViewChild, args: ['expand',] },],
        'expandChild': [{ type: ViewChild, args: ['expandChild',] },],
        'shrink': [{ type: ViewChild, args: ['shrink',] },],
    };
    return ResizeSensorComponent;
}());
