"use strict";
var core_1 = require('@angular/core');
var configuration_service_1 = require('../common/configuration.service');
var theme_service_1 = require('../common/theme.service');
var charts = require('@progress/kendo-charts');
var font = function (style) { return (style.fontSize + " " + style.fontFamily); };
var letterPos = function (letter) { return letter.toLowerCase().charCodeAt(0) - "a".charCodeAt(0); };
var seriesPos = function (name) { return letterPos(name.match(/series-([a-z])$/)[1]); };
/**
 * @hidden
 */
var ChartAutoThemeComponent = (function () {
    function ChartAutoThemeComponent(element, themeService) {
        this.element = element;
        this.themeService = themeService;
        themeService.startedLoading();
    }
    ChartAutoThemeComponent.prototype.ngAfterContentInit = function () {
        if (this.themeService.isLoaded() || typeof document === 'undefined') {
            return;
        }
        this.themeService.push(charts.chartBaseTheme());
        this.setColors();
        this.setFonts();
        this.setSeriesColors();
        this.themeService.markLoaded();
    };
    ChartAutoThemeComponent.prototype.setColors = function () {
        this.mapColor('axisDefaults.crosshair.color', 'chart-crosshair-background');
        this.mapColor('axisDefaults.labels.color', 'normal-text-color');
        this.mapColor('axisDefaults.line.color', 'chart-major-lines');
        this.mapColor('axisDefaults.majorGridLines.color', 'chart-major-lines');
        this.mapColor('axisDefaults.minorGridLines.color', 'chart-minor-lines');
        this.mapColor('axisDefaults.notes.icon.background', 'chart-notes-background');
        this.mapColor('axisDefaults.notes.icon.border.color', 'chart-notes-border');
        this.mapColor('axisDefaults.notes.line.color', 'chart-notes-lines');
        this.mapColor('axisDefaults.title.color', 'normal-text-color');
        this.mapColor('legend.inactiveItems.labels.color', 'chart-inactive');
        this.mapColor('legend.inactiveItems.markers.color', 'chart-inactive');
        this.mapColor('legend.labels.color', 'normal-text-color');
        this.mapColor('seriesDefaults.boxPlot.downColor', 'chart-major-lines');
        this.mapColor('seriesDefaults.boxPlot.mean.color', 'base');
        this.mapColor('seriesDefaults.boxPlot.median.color', 'base');
        this.mapColor('seriesDefaults.boxPlot.whiskers.color', 'accent');
        this.mapColor('seriesDefaults.bullet.target.color', 'accent');
        this.mapColor('seriesDefaults.candlestick.downColor', 'normal-text-color');
        this.mapColor('seriesDefaults.candlestick.line.color', 'normal-text-color');
        this.mapColor('seriesDefaults.errorBars.color', 'chart-error-bars-background');
        this.mapColor('seriesDefaults.horizontalWaterfall.line.color', 'chart-major-lines');
        this.mapColor('seriesDefaults.icon.border.color', 'chart-major-lines');
        this.mapColor('seriesDefaults.labels.background', 'background');
        this.mapColor('seriesDefaults.labels.color', 'normal-text-color');
        this.mapColor('seriesDefaults.notes.icon.background', 'chart-notes-background');
        this.mapColor('seriesDefaults.notes.icon.border.color', 'chart-notes-border');
        this.mapColor('seriesDefaults.notes.line.color', 'chart-notes-lines');
        this.mapColor('seriesDefaults.verticalBoxPlot.downColor', 'chart-major-lines');
        this.mapColor('seriesDefaults.verticalBoxPlot.mean.color', 'base');
        this.mapColor('seriesDefaults.verticalBoxPlot.median.color', 'base');
        this.mapColor('seriesDefaults.verticalBoxPlot.whiskers.color', 'accent');
        this.mapColor('seriesDefaults.verticalBullet.target.color', 'accent');
        this.mapColor('seriesDefaults.waterfall.line.color', 'chart-major-lines');
        this.mapColor('title.color', 'normal-text-color');
        var opacity = this.queryStyle('chart-area-opacity').opacity;
        this.notify('seriesDefaults.area.opacity', opacity);
        this.notify('seriesDefaults.labels.opacity', opacity);
    };
    ChartAutoThemeComponent.prototype.setFonts = function () {
        var defaultFont = font(this.queryStyle('chart-font'));
        var titleFont = font(this.queryStyle('chart-title-font'));
        var labelFont = font(this.queryStyle('chart-label-font'));
        this.notify('axisDefaults.labels.font', labelFont);
        this.notify('axisDefaults.notes.label.font', defaultFont);
        this.notify('axisDefaults.title.font', defaultFont);
        this.notify('legend.labels.font', defaultFont);
        this.notify('seriesDefaults.labels.font', labelFont);
        this.notify('seriesDefaults.notes.label.font', defaultFont);
        this.notify('title.font', titleFont);
    };
    ChartAutoThemeComponent.prototype.setSeriesColors = function () {
        var element = this.element.nativeElement;
        var series = [].slice.call(element.querySelectorAll('.k-var--series div'));
        var seriesColors = series.reduce(function (arr, el) {
            var pos = seriesPos(el.className);
            arr[pos] = window.getComputedStyle(el).backgroundColor;
            return arr;
        }, [] // Will populate the series colors in this array
        );
        this.notify('seriesColors', seriesColors);
    };
    ChartAutoThemeComponent.prototype.mapColor = function (key, varName) {
        this.notify(key, this.queryStyle(varName).backgroundColor);
    };
    ChartAutoThemeComponent.prototype.queryStyle = function (varName) {
        var element = this.element.nativeElement;
        return window.getComputedStyle(element.querySelector(".k-var--" + varName));
    };
    ChartAutoThemeComponent.prototype.notify = function (key, value) {
        var change = new configuration_service_1.Change(key, value);
        this.themeService.notify(change);
    };
    ChartAutoThemeComponent.decorators = [
        { type: core_1.Component, args: [{
                    changeDetection: core_1.ChangeDetectionStrategy.OnPush,
                    selector: 'kendo-chart-auto-theme',
                    styles: ["\n    :host {\n      display: none;\n    }\n  "],
                    template: "\n    <div class=\"k-var--accent\"></div>\n    <div class=\"k-var--base\"></div>\n    <div class=\"k-var--background\"></div>\n\n    <div class=\"k-var--normal-background\"></div>\n    <div class=\"k-var--normal-text-color\"></div>\n    <div class=\"k-var--hover-background\"></div>\n    <div class=\"k-var--hover-text-color\"></div>\n    <div class=\"k-var--selected-background\"></div>\n    <div class=\"k-var--selected-text-color\"></div>\n    <div class=\"k-var--chart-error-bars-background\"></div>\n    <div class=\"k-var--chart-notes-background\"></div>\n    <div class=\"k-var--chart-notes-border\"></div>\n    <div class=\"k-var--chart-notes-lines\"></div>\n    <div class=\"k-var--chart-crosshair-background\"></div>\n\n    <div class=\"k-var--chart-inactive\"></div>\n    <div class=\"k-var--chart-major-lines\"></div>\n    <div class=\"k-var--chart-minor-lines\"></div>\n    <div class=\"k-var--chart-area-opacity\"></div>\n\n    <div class=\"k-widget\">\n        <div class=\"k-var--chart-font\"></div>\n        <div class=\"k-var--chart-title-font\"></div>\n        <div class=\"k-var--chart-label-font\"></div>\n    </div>\n\n    <div class=\"k-var--series\">\n      <div class=\"k-var--series-a\"></div>\n      <div class=\"k-var--series-b\"></div>\n      <div class=\"k-var--series-c\"></div>\n      <div class=\"k-var--series-d\"></div>\n      <div class=\"k-var--series-e\"></div>\n      <div class=\"k-var--series-f\"></div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    ChartAutoThemeComponent.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: theme_service_1.ThemeService, },
    ]; };
    return ChartAutoThemeComponent;
}());
exports.ChartAutoThemeComponent = ChartAutoThemeComponent;
